// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dbms_project.job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: job Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "job";
	private final String projectName = "DBMS_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int Customer_ID;

		public int getCustomer_ID() {
			return this.Customer_ID;
		}

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public String Delivery_Date;

		public String getDelivery_Date() {
			return this.Delivery_Date;
		}

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public long Product_ID;

		public long getProduct_ID() {
			return this.Product_ID;
		}

		public int Quantity_Ordered;

		public int getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public float Total_Retail_Price_for_This_Order;

		public float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public float Cost_Price_Per_Unit;

		public float getCost_Price_Per_Unit() {
			return this.Cost_Price_Per_Unit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Product_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.Product_ID != other.Product_ID)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.Customer_ID = this.Customer_ID;
			other.Customer_Status = this.Customer_Status;
			other.Date_Order_was_placed = this.Date_Order_was_placed;
			other.Delivery_Date = this.Delivery_Date;
			other.Order_ID = this.Order_ID;
			other.Product_ID = this.Product_ID;
			other.Quantity_Ordered = this.Quantity_Ordered;
			other.Total_Retail_Price_for_This_Order = this.Total_Retail_Price_for_This_Order;
			other.Cost_Price_Per_Unit = this.Cost_Price_Per_Unit;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.Product_ID = this.Product_ID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Customer_ID = dis.readInt();

				this.Customer_Status = readString(dis, ois);

				this.Date_Order_was_placed = readString(dis, ois);

				this.Delivery_Date = readString(dis, ois);

				this.Order_ID = dis.readInt();

				this.Quantity_Ordered = dis.readInt();

				this.Total_Retail_Price_for_This_Order = dis.readFloat();

				this.Cost_Price_Per_Unit = dis.readFloat();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Customer_ID = objectIn.readInt();

				this.Customer_Status = readString(dis, objectIn);

				this.Date_Order_was_placed = readString(dis, objectIn);

				this.Delivery_Date = readString(dis, objectIn);

				this.Order_ID = objectIn.readInt();

				this.Quantity_Ordered = objectIn.readInt();

				this.Total_Retail_Price_for_This_Order = objectIn.readFloat();

				this.Cost_Price_Per_Unit = objectIn.readFloat();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.Customer_ID);

				writeString(this.Customer_Status, dos, oos);

				writeString(this.Date_Order_was_placed, dos, oos);

				writeString(this.Delivery_Date, dos, oos);

				dos.writeInt(this.Order_ID);

				dos.writeInt(this.Quantity_Ordered);

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				dos.writeFloat(this.Cost_Price_Per_Unit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.Customer_ID);

				writeString(this.Customer_Status, dos, objectOut);

				writeString(this.Date_Order_was_placed, dos, objectOut);

				writeString(this.Delivery_Date, dos, objectOut);

				objectOut.writeInt(this.Order_ID);

				objectOut.writeInt(this.Quantity_Ordered);

				objectOut.writeFloat(this.Total_Retail_Price_for_This_Order);

				objectOut.writeFloat(this.Cost_Price_Per_Unit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Customer_ID=" + String.valueOf(Customer_ID));
			sb.append(",Customer_Status=" + Customer_Status);
			sb.append(",Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Delivery_Date=" + Delivery_Date);
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Cost_Price_Per_Unit=" + String.valueOf(Cost_Price_Per_Unit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Product_ID, other.Product_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Customer_ID;

		public int getCustomer_ID() {
			return this.Customer_ID;
		}

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public String Delivery_Date;

		public String getDelivery_Date() {
			return this.Delivery_Date;
		}

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public long Product_ID;

		public long getProduct_ID() {
			return this.Product_ID;
		}

		public int Quantity_Ordered;

		public int getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public float Total_Retail_Price_for_This_Order;

		public float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public float Cost_Price_Per_Unit;

		public float getCost_Price_Per_Unit() {
			return this.Cost_Price_Per_Unit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Customer_ID = dis.readInt();

					this.Customer_Status = readString(dis);

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Order_ID = dis.readInt();

					this.Product_ID = dis.readLong();

					this.Quantity_Ordered = dis.readInt();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Cost_Price_Per_Unit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Customer_ID = dis.readInt();

					this.Customer_Status = readString(dis);

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Order_ID = dis.readInt();

					this.Product_ID = dis.readLong();

					this.Quantity_Ordered = dis.readInt();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Cost_Price_Per_Unit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Customer_ID);

				// String

				writeString(this.Customer_Status, dos);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// int

				dos.writeInt(this.Order_ID);

				// long

				dos.writeLong(this.Product_ID);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// float

				dos.writeFloat(this.Cost_Price_Per_Unit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Customer_ID);

				// String

				writeString(this.Customer_Status, dos);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// int

				dos.writeInt(this.Order_ID);

				// long

				dos.writeLong(this.Product_ID);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// float

				dos.writeFloat(this.Cost_Price_Per_Unit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Customer_ID=" + String.valueOf(Customer_ID));
			sb.append(",Customer_Status=" + Customer_Status);
			sb.append(",Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Delivery_Date=" + Delivery_Date);
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Cost_Price_Per_Unit=" + String.valueOf(Cost_Price_Per_Unit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tUniqRow_1 - inputs:(row2) outputs:(row4,row4) | target
				// node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row4,row3) outputs:(T,T2,T1,T3,T4)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tUniqRow_1 = 0;

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/Mega-PC/Desktop/Bi_project/data/orders.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Mega-PC/Desktop/Bi_project/data/orders.csv", "UTF-8", ",", "\n", false, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.Customer_ID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Customer_ID", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Customer_ID' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row2.Customer_Status = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row2.Date_Order_was_placed = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row2.Delivery_Date = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.Order_ID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Order_ID", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Order_ID' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.Product_ID = ParserUtils.parseTo_long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Product_ID", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Product_ID' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.Quantity_Ordered = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Quantity_Ordered", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Quantity_Ordered' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.Total_Retail_Price_for_This_Order = ParserUtils.parseTo_float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Total_Retail_Price_for_This_Order", "row2", temp,
											ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Total_Retail_Price_for_This_Order' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.Cost_Price_Per_Unit = ParserUtils.parseTo_float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Cost_Price_Per_Unit", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Cost_Price_Per_Unit' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

							row4.Customer_ID = row2.Customer_ID;
							row4.Customer_Status = row2.Customer_Status;
							row4.Date_Order_was_placed = row2.Date_Order_was_placed;
							row4.Delivery_Date = row2.Delivery_Date;
							row4.Order_ID = row2.Order_ID;
							row4.Product_ID = row2.Product_ID;
							row4.Quantity_Ordered = row2.Quantity_Ordered;
							row4.Total_Retail_Price_for_This_Order = row2.Total_Retail_Price_for_This_Order;
							row4.Cost_Price_Per_Unit = row2.Cost_Price_Per_Unit;
							row4.Customer_ID = row2.Customer_ID;
							row4.Customer_Status = row2.Customer_Status;
							row4.Date_Order_was_placed = row2.Date_Order_was_placed;
							row4.Delivery_Date = row2.Delivery_Date;
							row4.Order_ID = row2.Order_ID;
							row4.Product_ID = row2.Product_ID;
							row4.Quantity_Ordered = row2.Quantity_Ordered;
							row4.Total_Retail_Price_for_This_Order = row2.Total_Retail_Price_for_This_Order;
							row4.Cost_Price_Per_Unit = row2.Cost_Price_Per_Unit;

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tAdvancedHash_row4 main ] start
								 */

								currentComponent = "tAdvancedHash_row4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

								row4Struct row4_HashRow = new row4Struct();

								row4_HashRow.Customer_ID = row4.Customer_ID;

								row4_HashRow.Customer_Status = row4.Customer_Status;

								row4_HashRow.Date_Order_was_placed = row4.Date_Order_was_placed;

								row4_HashRow.Delivery_Date = row4.Delivery_Date;

								row4_HashRow.Order_ID = row4.Order_ID;

								row4_HashRow.Product_ID = row4.Product_ID;

								row4_HashRow.Quantity_Ordered = row4.Quantity_Ordered;

								row4_HashRow.Total_Retail_Price_for_This_Order = row4.Total_Retail_Price_for_This_Order;

								row4_HashRow.Cost_Price_Per_Unit = row4.Cost_Price_Per_Unit;

								tHash_Lookup_row4.put(row4_HashRow);

								tos_count_tAdvancedHash_row4++;

								/**
								 * [tAdvancedHash_row4 main ] stop
								 */

								/**
								 * [tAdvancedHash_row4 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row4";

								/**
								 * [tAdvancedHash_row4 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row4 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row4";

								/**
								 * [tAdvancedHash_row4 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/Mega-PC/Desktop/Bi_project/data/orders.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public float Avg_Delivery;

		public float getAvg_Delivery() {
			return this.Avg_Delivery;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Avg_Delivery = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Avg_Delivery = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// float

				dos.writeFloat(this.Avg_Delivery);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// float

				dos.writeFloat(this.Avg_Delivery);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Avg_Delivery=" + String.valueOf(Avg_Delivery));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public float Avg_Delivery;

		public float getAvg_Delivery() {
			return this.Avg_Delivery;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Avg_Delivery = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Avg_Delivery = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// float

				dos.writeFloat(this.Avg_Delivery);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// float

				dos.writeFloat(this.Avg_Delivery);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Avg_Delivery=" + String.valueOf(Avg_Delivery));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public float Avg_Delivery;

		public float getAvg_Delivery() {
			return this.Avg_Delivery;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Avg_Delivery = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Avg_Delivery = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// float

				dos.writeFloat(this.Avg_Delivery);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// float

				dos.writeFloat(this.Avg_Delivery);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Avg_Delivery=" + String.valueOf(Avg_Delivery));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public java.util.Date Delivery_Date;

		public java.util.Date getDelivery_Date() {
			return this.Delivery_Date;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public long Difference_Dates;

		public long getDifference_Dates() {
			return this.Difference_Dates;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readDate(dis);

					this.Delivery_Date = readDate(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readDate(dis);

					this.Delivery_Date = readDate(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// java.util.Date

				writeDate(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// java.util.Date

				writeDate(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Delivery_Date=" + String.valueOf(Delivery_Date));
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Difference_Dates=" + String.valueOf(Difference_Dates));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TdStruct implements routines.system.IPersistableRow<TdStruct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public java.util.Date Delivery_Date;

		public java.util.Date getDelivery_Date() {
			return this.Delivery_Date;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public long Difference_Dates;

		public long getDifference_Dates() {
			return this.Difference_Dates;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readDate(dis);

					this.Delivery_Date = readDate(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readDate(dis);

					this.Delivery_Date = readDate(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// java.util.Date

				writeDate(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// java.util.Date

				writeDate(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Delivery_Date=" + String.valueOf(Delivery_Date));
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Difference_Dates=" + String.valueOf(Difference_Dates));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TdStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public String Delivery_Date;

		public String getDelivery_Date() {
			return this.Delivery_Date;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public long Difference_Dates;

		public long getDifference_Dates() {
			return this.Difference_Dates;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Delivery_Date=" + Delivery_Date);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Difference_Dates=" + String.valueOf(Difference_Dates));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public String Delivery_Date;

		public String getDelivery_Date() {
			return this.Delivery_Date;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public long Difference_Dates;

		public long getDifference_Dates() {
			return this.Difference_Dates;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Delivery_Date=" + Delivery_Date);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Difference_Dates=" + String.valueOf(Difference_Dates));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TSStruct implements routines.system.IPersistableRow<TSStruct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public java.util.Date Date_Order_was_placed;

		public java.util.Date getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readDate(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + String.valueOf(Date_Order_was_placed));
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Order_Sum;

		public int getOrder_Sum() {
			return this.Order_Sum;
		}

		public int Quantity_Ordered_Sum;

		public int getQuantity_Ordered_Sum() {
			return this.Quantity_Ordered_Sum;
		}

		public float profit_Per_day;

		public float getProfit_Per_day() {
			return this.profit_Per_day;
		}

		public float Total_Retail_Price_for_This_Order_Sum;

		public float getTotal_Retail_Price_for_This_Order_Sum() {
			return this.Total_Retail_Price_for_This_Order_Sum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Order_Sum = dis.readInt();

					this.Quantity_Ordered_Sum = dis.readInt();

					this.profit_Per_day = dis.readFloat();

					this.Total_Retail_Price_for_This_Order_Sum = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Order_Sum);

				// int

				dos.writeInt(this.Quantity_Ordered_Sum);

				// float

				dos.writeFloat(this.profit_Per_day);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order_Sum);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Order_Sum=" + String.valueOf(Order_Sum));
			sb.append(",Quantity_Ordered_Sum=" + String.valueOf(Quantity_Ordered_Sum));
			sb.append(",profit_Per_day=" + String.valueOf(profit_Per_day));
			sb.append(
					",Total_Retail_Price_for_This_Order_Sum=" + String.valueOf(Total_Retail_Price_for_This_Order_Sum));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Quantity_Ordered;

		public int getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public float profit;

		public float getProfit() {
			return this.profit;
		}

		public float Total_Retail_Price_for_This_Order;

		public float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.profit = dis.readFloat();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Order_ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.profit = dis.readFloat();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Order_ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.profit);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// int

				dos.writeInt(this.Order_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.profit);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// int

				dos.writeInt(this.Order_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",profit=" + String.valueOf(profit));
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public float Totalprofit;

		public float getTotalprofit() {
			return this.Totalprofit;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Totalprofit = dis.readFloat();

					this.Product_Category = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Totalprofit = dis.readFloat();

					this.Product_Category = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// float

				dos.writeFloat(this.Totalprofit);

				// String

				writeString(this.Product_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// float

				dos.writeFloat(this.Totalprofit);

				// String

				writeString(this.Product_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Totalprofit=" + String.valueOf(Totalprofit));
			sb.append(",Product_Category=" + Product_Category);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public Float Totalprofit;

		public Float getTotalprofit() {
			return this.Totalprofit;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Totalprofit = null;
					} else {
						this.Totalprofit = dis.readFloat();
					}

					this.Product_Category = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Totalprofit = null;
					} else {
						this.Totalprofit = dis.readFloat();
					}

					this.Product_Category = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Float

				if (this.Totalprofit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Totalprofit);
				}

				// String

				writeString(this.Product_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Float

				if (this.Totalprofit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Totalprofit);
				}

				// String

				writeString(this.Product_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Totalprofit=" + String.valueOf(Totalprofit));
			sb.append(",Product_Category=" + Product_Category);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public Float Totalprofit;

		public Float getTotalprofit() {
			return this.Totalprofit;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Totalprofit = null;
					} else {
						this.Totalprofit = dis.readFloat();
					}

					this.Product_Category = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Totalprofit = null;
					} else {
						this.Totalprofit = dis.readFloat();
					}

					this.Product_Category = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Float

				if (this.Totalprofit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Totalprofit);
				}

				// String

				writeString(this.Product_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Float

				if (this.Totalprofit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Totalprofit);
				}

				// String

				writeString(this.Product_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Totalprofit=" + String.valueOf(Totalprofit));
			sb.append(",Product_Category=" + Product_Category);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public Float Total_Retail_Price_for_This_Order;

		public Float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public Integer Quantity_Ordered;

		public Integer getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public Float Cost_Price_Per_Unit;

		public Float getCost_Price_Per_Unit() {
			return this.Cost_Price_Per_Unit;
		}

		public Float Profit;

		public Float getProfit() {
			return this.Profit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Retail_Price_for_This_Order = null;
					} else {
						this.Total_Retail_Price_for_This_Order = dis.readFloat();
					}

					this.Quantity_Ordered = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Cost_Price_Per_Unit = null;
					} else {
						this.Cost_Price_Per_Unit = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Profit = null;
					} else {
						this.Profit = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Retail_Price_for_This_Order = null;
					} else {
						this.Total_Retail_Price_for_This_Order = dis.readFloat();
					}

					this.Quantity_Ordered = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Cost_Price_Per_Unit = null;
					} else {
						this.Cost_Price_Per_Unit = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Profit = null;
					} else {
						this.Profit = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Float

				if (this.Total_Retail_Price_for_This_Order == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Retail_Price_for_This_Order);
				}

				// Integer

				writeInteger(this.Quantity_Ordered, dos);

				// Float

				if (this.Cost_Price_Per_Unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cost_Price_Per_Unit);
				}

				// Float

				if (this.Profit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Profit);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Float

				if (this.Total_Retail_Price_for_This_Order == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Retail_Price_for_This_Order);
				}

				// Integer

				writeInteger(this.Quantity_Ordered, dos);

				// Float

				if (this.Cost_Price_Per_Unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cost_Price_Per_Unit);
				}

				// Float

				if (this.Profit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Profit);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",Cost_Price_Per_Unit=" + String.valueOf(Cost_Price_Per_Unit));
			sb.append(",Profit=" + String.valueOf(Profit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public Integer Nb_Product_Per_Category;

		public Integer getNb_Product_Per_Category() {
			return this.Nb_Product_Per_Category;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Nb_Product_Per_Category = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Nb_Product_Per_Category = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Integer

				writeInteger(this.Nb_Product_Per_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Integer

				writeInteger(this.Nb_Product_Per_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Nb_Product_Per_Category=" + String.valueOf(Nb_Product_Per_Category));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public Integer Nb_Product_Per_Category;

		public Integer getNb_Product_Per_Category() {
			return this.Nb_Product_Per_Category;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Nb_Product_Per_Category = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Nb_Product_Per_Category = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Integer

				writeInteger(this.Nb_Product_Per_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Integer

				writeInteger(this.Nb_Product_Per_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Nb_Product_Per_Category=" + String.valueOf(Nb_Product_Per_Category));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public Integer Nb_Product_Per_Category;

		public Integer getNb_Product_Per_Category() {
			return this.Nb_Product_Per_Category;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Nb_Product_Per_Category = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					this.Nb_Product_Per_Category = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Integer

				writeInteger(this.Nb_Product_Per_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Integer

				writeInteger(this.Nb_Product_Per_Category, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Nb_Product_Per_Category=" + String.valueOf(Nb_Product_Per_Category));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long Product_ID;

		public Long getProduct_ID() {
			return this.Product_ID;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Group;

		public String getProduct_Group() {
			return this.Product_Group;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Product_ID == null) ? 0 : this.Product_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.Product_ID == null) {
				if (other.Product_ID != null)
					return false;

			} else if (!this.Product_ID.equals(other.Product_ID))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.Product_ID = this.Product_ID;
			other.Product_Category = this.Product_Category;
			other.Product_Group = this.Product_Group;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.Product_ID = this.Product_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Product_ID = null;
					} else {
						this.Product_ID = dis.readLong();
					}

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Product_ID = null;
					} else {
						this.Product_ID = dis.readLong();
					}

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Product_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Product_ID);
				}

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.Product_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Product_ID);
				}

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Group=" + Product_Group);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Product_ID, other.Product_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Avg_Quantity;

		public int getAvg_Quantity() {
			return this.Avg_Quantity;
		}

		public float Avg_Retail_price_per_order;

		public float getAvg_Retail_price_per_order() {
			return this.Avg_Retail_price_per_order;
		}

		public float Total_Retail_Sales;

		public float getTotal_Retail_Sales() {
			return this.Total_Retail_Sales;
		}

		public float Total_cost;

		public float getTotal_cost() {
			return this.Total_cost;
		}

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public float Total_Profit;

		public float getTotal_Profit() {
			return this.Total_Profit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Avg_Quantity=" + String.valueOf(Avg_Quantity));
			sb.append(",Avg_Retail_price_per_order=" + String.valueOf(Avg_Retail_price_per_order));
			sb.append(",Total_Retail_Sales=" + String.valueOf(Total_Retail_Sales));
			sb.append(",Total_cost=" + String.valueOf(Total_cost));
			sb.append(",Customer_Status=" + Customer_Status);
			sb.append(",Total_Profit=" + String.valueOf(Total_Profit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Avg_Quantity;

		public int getAvg_Quantity() {
			return this.Avg_Quantity;
		}

		public float Avg_Retail_price_per_order;

		public float getAvg_Retail_price_per_order() {
			return this.Avg_Retail_price_per_order;
		}

		public float Total_Retail_Sales;

		public float getTotal_Retail_Sales() {
			return this.Total_Retail_Sales;
		}

		public float Total_cost;

		public float getTotal_cost() {
			return this.Total_cost;
		}

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public float Total_Profit;

		public float getTotal_Profit() {
			return this.Total_Profit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Avg_Quantity=" + String.valueOf(Avg_Quantity));
			sb.append(",Avg_Retail_price_per_order=" + String.valueOf(Avg_Retail_price_per_order));
			sb.append(",Total_Retail_Sales=" + String.valueOf(Total_Retail_Sales));
			sb.append(",Total_cost=" + String.valueOf(Total_cost));
			sb.append(",Customer_Status=" + Customer_Status);
			sb.append(",Total_Profit=" + String.valueOf(Total_Profit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Avg_Quantity;

		public int getAvg_Quantity() {
			return this.Avg_Quantity;
		}

		public float Avg_Retail_price_per_order;

		public float getAvg_Retail_price_per_order() {
			return this.Avg_Retail_price_per_order;
		}

		public float Total_Retail_Sales;

		public float getTotal_Retail_Sales() {
			return this.Total_Retail_Sales;
		}

		public float Total_cost;

		public float getTotal_cost() {
			return this.Total_cost;
		}

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public float Total_Profit;

		public float getTotal_Profit() {
			return this.Total_Profit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Avg_Quantity=" + String.valueOf(Avg_Quantity));
			sb.append(",Avg_Retail_price_per_order=" + String.valueOf(Avg_Retail_price_per_order));
			sb.append(",Total_Retail_Sales=" + String.valueOf(Total_Retail_Sales));
			sb.append(",Total_cost=" + String.valueOf(Total_cost));
			sb.append(",Customer_Status=" + Customer_Status);
			sb.append(",Total_Profit=" + String.valueOf(Total_Profit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Avg_Quantity;

		public int getAvg_Quantity() {
			return this.Avg_Quantity;
		}

		public float Avg_Retail_price_per_order;

		public float getAvg_Retail_price_per_order() {
			return this.Avg_Retail_price_per_order;
		}

		public float Total_Retail_Sales;

		public float getTotal_Retail_Sales() {
			return this.Total_Retail_Sales;
		}

		public float Total_cost;

		public float getTotal_cost() {
			return this.Total_cost;
		}

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public float Total_Profit;

		public float getTotal_Profit() {
			return this.Total_Profit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Avg_Quantity = dis.readInt();

					this.Avg_Retail_price_per_order = dis.readFloat();

					this.Total_Retail_Sales = dis.readFloat();

					this.Total_cost = dis.readFloat();

					this.Customer_Status = readString(dis);

					this.Total_Profit = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Avg_Quantity);

				// float

				dos.writeFloat(this.Avg_Retail_price_per_order);

				// float

				dos.writeFloat(this.Total_Retail_Sales);

				// float

				dos.writeFloat(this.Total_cost);

				// String

				writeString(this.Customer_Status, dos);

				// float

				dos.writeFloat(this.Total_Profit);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Avg_Quantity=" + String.valueOf(Avg_Quantity));
			sb.append(",Avg_Retail_price_per_order=" + String.valueOf(Avg_Retail_price_per_order));
			sb.append(",Total_Retail_Sales=" + String.valueOf(Total_Retail_Sales));
			sb.append(",Total_cost=" + String.valueOf(Total_cost));
			sb.append(",Customer_Status=" + Customer_Status);
			sb.append(",Total_Profit=" + String.valueOf(Total_Profit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public int Quantity_Ordered;

		public int getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public float Total_Retail_Price_for_This_Order;

		public float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public float Cost_Price_Per_Unit;

		public float getCost_Price_Per_Unit() {
			return this.Cost_Price_Per_Unit;
		}

		public float Totalcost;

		public float getTotalcost() {
			return this.Totalcost;
		}

		public float Profit_per_order;

		public float getProfit_per_order() {
			return this.Profit_per_order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Customer_Status = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Cost_Price_Per_Unit = dis.readFloat();

					this.Totalcost = dis.readFloat();

					this.Profit_per_order = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Customer_Status = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Cost_Price_Per_Unit = dis.readFloat();

					this.Totalcost = dis.readFloat();

					this.Profit_per_order = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Customer_Status, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// float

				dos.writeFloat(this.Cost_Price_Per_Unit);

				// float

				dos.writeFloat(this.Totalcost);

				// float

				dos.writeFloat(this.Profit_per_order);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Customer_Status, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// float

				dos.writeFloat(this.Cost_Price_Per_Unit);

				// float

				dos.writeFloat(this.Totalcost);

				// float

				dos.writeFloat(this.Profit_per_order);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Customer_Status=" + Customer_Status);
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Cost_Price_Per_Unit=" + String.valueOf(Cost_Price_Per_Unit));
			sb.append(",Totalcost=" + String.valueOf(Totalcost));
			sb.append(",Profit_per_order=" + String.valueOf(Profit_per_order));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TStruct implements routines.system.IPersistableRow<TStruct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Customer_Status;

		public String getCustomer_Status() {
			return this.Customer_Status;
		}

		public int Quantity_Ordered;

		public int getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public float Total_Retail_Price_for_This_Order;

		public float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public float Cost_Price_Per_Unit;

		public float getCost_Price_Per_Unit() {
			return this.Cost_Price_Per_Unit;
		}

		public float Totalcost;

		public float getTotalcost() {
			return this.Totalcost;
		}

		public float Profit_per_order;

		public float getProfit_per_order() {
			return this.Profit_per_order;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Customer_Status = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Cost_Price_Per_Unit = dis.readFloat();

					this.Totalcost = dis.readFloat();

					this.Profit_per_order = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Customer_Status = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Cost_Price_Per_Unit = dis.readFloat();

					this.Totalcost = dis.readFloat();

					this.Profit_per_order = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Customer_Status, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// float

				dos.writeFloat(this.Cost_Price_Per_Unit);

				// float

				dos.writeFloat(this.Totalcost);

				// float

				dos.writeFloat(this.Profit_per_order);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Customer_Status, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// float

				dos.writeFloat(this.Cost_Price_Per_Unit);

				// float

				dos.writeFloat(this.Totalcost);

				// float

				dos.writeFloat(this.Profit_per_order);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Customer_Status=" + Customer_Status);
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Cost_Price_Per_Unit=" + String.valueOf(Cost_Price_Per_Unit));
			sb.append(",Totalcost=" + String.valueOf(Totalcost));
			sb.append(",Profit_per_order=" + String.valueOf(Profit_per_order));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class T2Struct implements routines.system.IPersistableRow<T2Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long Product_ID;

		public Long getProduct_ID() {
			return this.Product_ID;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Group;

		public String getProduct_Group() {
			return this.Product_Group;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Product_ID == null) ? 0 : this.Product_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final T2Struct other = (T2Struct) obj;

			if (this.Product_ID == null) {
				if (other.Product_ID != null)
					return false;

			} else if (!this.Product_ID.equals(other.Product_ID))

				return false;

			return true;
		}

		public void copyDataTo(T2Struct other) {

			other.Product_ID = this.Product_ID;
			other.Product_Category = this.Product_Category;
			other.Product_Group = this.Product_Group;

		}

		public void copyKeysDataTo(T2Struct other) {

			other.Product_ID = this.Product_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Product_ID = null;
					} else {
						this.Product_ID = dis.readLong();
					}

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Product_ID = null;
					} else {
						this.Product_ID = dis.readLong();
					}

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Product_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Product_ID);
				}

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.Product_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Product_ID);
				}

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Group=" + Product_Group);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(T2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Product_ID, other.Product_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class T1Struct implements routines.system.IPersistableRow<T1Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public Float Total_Retail_Price_for_This_Order;

		public Float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public Integer Quantity_Ordered;

		public Integer getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public Float Cost_Price_Per_Unit;

		public Float getCost_Price_Per_Unit() {
			return this.Cost_Price_Per_Unit;
		}

		public Float Profit;

		public Float getProfit() {
			return this.Profit;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Retail_Price_for_This_Order = null;
					} else {
						this.Total_Retail_Price_for_This_Order = dis.readFloat();
					}

					this.Quantity_Ordered = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Cost_Price_Per_Unit = null;
					} else {
						this.Cost_Price_Per_Unit = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Profit = null;
					} else {
						this.Profit = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_Category = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Total_Retail_Price_for_This_Order = null;
					} else {
						this.Total_Retail_Price_for_This_Order = dis.readFloat();
					}

					this.Quantity_Ordered = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Cost_Price_Per_Unit = null;
					} else {
						this.Cost_Price_Per_Unit = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Profit = null;
					} else {
						this.Profit = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Float

				if (this.Total_Retail_Price_for_This_Order == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Retail_Price_for_This_Order);
				}

				// Integer

				writeInteger(this.Quantity_Ordered, dos);

				// Float

				if (this.Cost_Price_Per_Unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cost_Price_Per_Unit);
				}

				// Float

				if (this.Profit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Profit);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Product_Category, dos);

				// Float

				if (this.Total_Retail_Price_for_This_Order == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Total_Retail_Price_for_This_Order);
				}

				// Integer

				writeInteger(this.Quantity_Ordered, dos);

				// Float

				if (this.Cost_Price_Per_Unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cost_Price_Per_Unit);
				}

				// Float

				if (this.Profit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Profit);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_Category=" + Product_Category);
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",Cost_Price_Per_Unit=" + String.valueOf(Cost_Price_Per_Unit));
			sb.append(",Profit=" + String.valueOf(Profit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(T1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class T3Struct implements routines.system.IPersistableRow<T3Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public int Quantity_Ordered;

		public int getQuantity_Ordered() {
			return this.Quantity_Ordered;
		}

		public float profit;

		public float getProfit() {
			return this.profit;
		}

		public float Total_Retail_Price_for_This_Order;

		public float getTotal_Retail_Price_for_This_Order() {
			return this.Total_Retail_Price_for_This_Order;
		}

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.profit = dis.readFloat();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Order_ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Date_Order_was_placed = readString(dis);

					this.Quantity_Ordered = dis.readInt();

					this.profit = dis.readFloat();

					this.Total_Retail_Price_for_This_Order = dis.readFloat();

					this.Order_ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.profit);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// int

				dos.writeInt(this.Order_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Date_Order_was_placed, dos);

				// int

				dos.writeInt(this.Quantity_Ordered);

				// float

				dos.writeFloat(this.profit);

				// float

				dos.writeFloat(this.Total_Retail_Price_for_This_Order);

				// int

				dos.writeInt(this.Order_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Quantity_Ordered=" + String.valueOf(Quantity_Ordered));
			sb.append(",profit=" + String.valueOf(profit));
			sb.append(",Total_Retail_Price_for_This_Order=" + String.valueOf(Total_Retail_Price_for_This_Order));
			sb.append(",Order_ID=" + String.valueOf(Order_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(T3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class T4Struct implements routines.system.IPersistableRow<T4Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public int Order_ID;

		public int getOrder_ID() {
			return this.Order_ID;
		}

		public String Date_Order_was_placed;

		public String getDate_Order_was_placed() {
			return this.Date_Order_was_placed;
		}

		public String Delivery_Date;

		public String getDelivery_Date() {
			return this.Delivery_Date;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public long Difference_Dates;

		public long getDifference_Dates() {
			return this.Difference_Dates;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Order_ID = dis.readInt();

					this.Date_Order_was_placed = readString(dis);

					this.Delivery_Date = readString(dis);

					this.Product_Category = readString(dis);

					this.Difference_Dates = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.Order_ID);

				// String

				writeString(this.Date_Order_was_placed, dos);

				// String

				writeString(this.Delivery_Date, dos);

				// String

				writeString(this.Product_Category, dos);

				// long

				dos.writeLong(this.Difference_Dates);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Order_ID=" + String.valueOf(Order_ID));
			sb.append(",Date_Order_was_placed=" + Date_Order_was_placed);
			sb.append(",Delivery_Date=" + Delivery_Date);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Difference_Dates=" + String.valueOf(Difference_Dates));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(T4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public long Product_ID;

		public long getProduct_ID() {
			return this.Product_ID;
		}

		public String Product_Line;

		public String getProduct_Line() {
			return this.Product_Line;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Group;

		public String getProduct_Group() {
			return this.Product_Group;
		}

		public String Product_Name;

		public String getProduct_Name() {
			return this.Product_Name;
		}

		public String Supplier_Country;

		public String getSupplier_Country() {
			return this.Supplier_Country;
		}

		public String Supplier_Name;

		public String getSupplier_Name() {
			return this.Supplier_Name;
		}

		public String Supplier_ID;

		public String getSupplier_ID() {
			return this.Supplier_ID;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

					this.Product_Line = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

					this.Product_Name = readString(dis);

					this.Supplier_Country = readString(dis);

					this.Supplier_Name = readString(dis);

					this.Supplier_ID = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

					this.Product_Line = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

					this.Product_Name = readString(dis);

					this.Supplier_Country = readString(dis);

					this.Supplier_Name = readString(dis);

					this.Supplier_ID = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Supplier_Country, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Supplier_ID, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Supplier_Country, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Supplier_ID, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Product_Line=" + Product_Line);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Group=" + Product_Group);
			sb.append(",Product_Name=" + Product_Name);
			sb.append(",Supplier_Country=" + Supplier_Country);
			sb.append(",Supplier_Name=" + Supplier_Name);
			sb.append(",Supplier_ID=" + Supplier_ID);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public long Product_ID;

		public long getProduct_ID() {
			return this.Product_ID;
		}

		public String Product_Line;

		public String getProduct_Line() {
			return this.Product_Line;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Group;

		public String getProduct_Group() {
			return this.Product_Group;
		}

		public String Product_Name;

		public String getProduct_Name() {
			return this.Product_Name;
		}

		public String Supplier_Country;

		public String getSupplier_Country() {
			return this.Supplier_Country;
		}

		public String Supplier_Name;

		public String getSupplier_Name() {
			return this.Supplier_Name;
		}

		public String Supplier_ID;

		public String getSupplier_ID() {
			return this.Supplier_ID;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

					this.Product_Line = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

					this.Product_Name = readString(dis);

					this.Supplier_Country = readString(dis);

					this.Supplier_Name = readString(dis);

					this.Supplier_ID = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

					this.Product_Line = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

					this.Product_Name = readString(dis);

					this.Supplier_Country = readString(dis);

					this.Supplier_Name = readString(dis);

					this.Supplier_ID = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Supplier_Country, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Supplier_ID, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Supplier_Country, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Supplier_ID, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Product_Line=" + Product_Line);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Group=" + Product_Group);
			sb.append(",Product_Name=" + Product_Name);
			sb.append(",Supplier_Country=" + Supplier_Country);
			sb.append(",Supplier_Name=" + Supplier_Name);
			sb.append(",Supplier_ID=" + Supplier_ID);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_DBMS_PROJECT_job = new byte[0];
		static byte[] commonByteArray_DBMS_PROJECT_job = new byte[0];

		public long Product_ID;

		public long getProduct_ID() {
			return this.Product_ID;
		}

		public String Product_Line;

		public String getProduct_Line() {
			return this.Product_Line;
		}

		public String Product_Category;

		public String getProduct_Category() {
			return this.Product_Category;
		}

		public String Product_Group;

		public String getProduct_Group() {
			return this.Product_Group;
		}

		public String Product_Name;

		public String getProduct_Name() {
			return this.Product_Name;
		}

		public String Supplier_Country;

		public String getSupplier_Country() {
			return this.Supplier_Country;
		}

		public String Supplier_Name;

		public String getSupplier_Name() {
			return this.Supplier_Name;
		}

		public String Supplier_ID;

		public String getSupplier_ID() {
			return this.Supplier_ID;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DBMS_PROJECT_job.length) {
					if (length < 1024 && commonByteArray_DBMS_PROJECT_job.length == 0) {
						commonByteArray_DBMS_PROJECT_job = new byte[1024];
					} else {
						commonByteArray_DBMS_PROJECT_job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_DBMS_PROJECT_job, 0, length);
				strReturn = new String(commonByteArray_DBMS_PROJECT_job, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

					this.Product_Line = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

					this.Product_Name = readString(dis);

					this.Supplier_Country = readString(dis);

					this.Supplier_Name = readString(dis);

					this.Supplier_ID = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_DBMS_PROJECT_job) {

				try {

					int length = 0;

					this.Product_ID = dis.readLong();

					this.Product_Line = readString(dis);

					this.Product_Category = readString(dis);

					this.Product_Group = readString(dis);

					this.Product_Name = readString(dis);

					this.Supplier_Country = readString(dis);

					this.Supplier_Name = readString(dis);

					this.Supplier_ID = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Supplier_Country, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Supplier_ID, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// long

				dos.writeLong(this.Product_ID);

				// String

				writeString(this.Product_Line, dos);

				// String

				writeString(this.Product_Category, dos);

				// String

				writeString(this.Product_Group, dos);

				// String

				writeString(this.Product_Name, dos);

				// String

				writeString(this.Supplier_Country, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Supplier_ID, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Product_ID=" + String.valueOf(Product_ID));
			sb.append(",Product_Line=" + Product_Line);
			sb.append(",Product_Category=" + Product_Category);
			sb.append(",Product_Group=" + Product_Group);
			sb.append(",Product_Name=" + Product_Name);
			sb.append(",Supplier_Country=" + Supplier_Country);
			sb.append(",Supplier_Name=" + Supplier_Name);
			sb.append(",Supplier_ID=" + Supplier_ID);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				TStruct T = new TStruct();
				TStruct row5 = T;
				row9Struct row9 = new row9Struct();
				row9Struct row10 = row9;
				row14Struct row14 = new row14Struct();
				T2Struct T2 = new T2Struct();
				T2Struct row11 = T2;
				row12Struct row12 = new row12Struct();
				row12Struct row13 = row12;
				T1Struct T1 = new T1Struct();
				T1Struct row6 = T1;
				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;
				T3Struct T3 = new T3Struct();
				T3Struct row15 = T3;
				row16Struct row16 = new row16Struct();
				row16Struct row17 = row16;
				row18Struct row18 = new row18Struct();
				row18Struct row19 = row18;
				TSStruct TS = new TSStruct();
				TSStruct row20 = TS;
				row21Struct row21 = new row21Struct();
				row21Struct row22 = row21;
				T4Struct T4 = new T4Struct();
				T4Struct row23 = T4;
				row27Struct row27 = new row27Struct();
				TdStruct Td = new TdStruct();
				TdStruct row26 = Td;
				row24Struct row24 = new row24Struct();
				row24Struct row25 = row24;

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Customer_Status;
					double Avg_Quantity_sum;
					int Avg_Quantity_count = 0;
					BigDecimal Avg_Retail_price_per_order_sum;
					int Avg_Retail_price_per_order_count = 0;
					BigDecimal Total_cost_sum;
					BigDecimal Total_Retail_Sales_sum;
					BigDecimal Total_Profit_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.Customer_Status == null) ? 0 : this.Customer_Status.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.Customer_Status == null) {
							if (other.Customer_Status != null)
								return false;
						} else if (!this.Customer_Status.equals(other.Customer_Status))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "T");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tAggregateRow_3_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Product_Category;
					int count = 0;
					int Nb_Product_Per_Category_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.Product_Category == null) ? 0 : this.Product_Category.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.Product_Category == null) {
							if (other.Product_Category != null)
								return false;
						} else if (!this.Product_Category.equals(other.Product_Category))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "T2");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Product_Category;
					BigDecimal Totalprofit_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.Product_Category == null) ? 0 : this.Product_Category.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.Product_Category == null) {
							if (other.Product_Category != null)
								return false;
						} else if (!this.Product_Category.equals(other.Product_Category))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "T1");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAggregateRow_4_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Date_Order_was_placed;
					int count = 0;
					int Order_Sum_clmCount = 0;

					int Quantity_Ordered_Sum_sum;
					BigDecimal profit_Per_day_sum;
					BigDecimal Total_Retail_Price_for_This_Order_Sum_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Date_Order_was_placed == null) ? 0
									: this.Date_Order_was_placed.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.Date_Order_was_placed == null) {
							if (other.Date_Order_was_placed != null)
								return false;
						} else if (!this.Date_Order_was_placed.equals(other.Date_Order_was_placed))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "T3");
				}

				int tos_count_tLogRow_7 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
///////////////////////    			

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tAggregateRow_5_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Product_Category;
					double Avg_Delivery_sum;
					int Avg_Delivery_count = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.Product_Category == null) ? 0 : this.Product_Category.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.Product_Category == null) {
							if (other.Product_Category != null)
								return false;
						} else if (!this.Product_Category.equals(other.Product_Category))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_14 begin ] start
				 */

				ok_Hash.put("tLogRow_14", false);
				start_Hash.put("tLogRow_14", System.currentTimeMillis());

				currentComponent = "tLogRow_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Td");
				}

				int tos_count_tLogRow_14 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_14 = "|";
				java.io.PrintStream consoleOut_tLogRow_14 = null;

				StringBuilder strBuffer_tLogRow_14 = null;
				int nb_line_tLogRow_14 = 0;
///////////////////////    			

				/**
				 * [tLogRow_14 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				TdStruct Td_tmp = new TdStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tLogRow_12 begin ] start
				 */

				ok_Hash.put("tLogRow_12", false);
				start_Hash.put("tLogRow_12", System.currentTimeMillis());

				currentComponent = "tLogRow_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "T4");
				}

				int tos_count_tLogRow_12 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_12 = "|";
				java.io.PrintStream consoleOut_tLogRow_12 = null;

				StringBuilder strBuffer_tLogRow_12 = null;
				int nb_line_tLogRow_12 = 0;
///////////////////////    			

				/**
				 * [tLogRow_12 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				TStruct T_tmp = new TStruct();
				T2Struct T2_tmp = new T2Struct();
				T1Struct T1_tmp = new T1Struct();
				T3Struct T3_tmp = new T3Struct();
				T4Struct T4_tmp = new T4Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tUniqRow_2 = 0;

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/Mega-PC/Desktop/Bi_project/data/product-supplier.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/Mega-PC/Desktop/Bi_project/data/product-supplier.csv", "UTF-8", ",", "\n",
								false, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.Product_ID = ParserUtils.parseTo_long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Product_ID", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'Product_ID' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row1.Product_Line = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row1.Product_Category = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row1.Product_Group = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row1.Product_Name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row1.Supplier_Country = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row1.Supplier_Name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row1.Supplier_ID = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row1.Column8 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row1.Column9 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							row3.Product_ID = row1.Product_ID;
							row3.Product_Line = row1.Product_Line;
							row3.Product_Category = row1.Product_Category;
							row3.Product_Group = row1.Product_Group;
							row3.Product_Name = row1.Product_Name;
							row3.Supplier_Country = row1.Supplier_Country;
							row3.Supplier_Name = row1.Supplier_Name;
							row3.Supplier_ID = row1.Supplier_ID;
							row3.Column8 = row1.Column8;
							row3.Column9 = row1.Column9;

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */

							/**
							 * [tUniqRow_2 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row4"
								///////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									Object exprKeyValue_row4__Product_ID = row3.Product_ID;
									if (exprKeyValue_row4__Product_ID == null) {
										hasCasePrimitiveKeyWithNull_tMap_1 = true;
									} else {
										row4HashKey.Product_ID = (long) (Long) exprKeyValue_row4__Product_ID;
									}

									row4HashKey.hashCodeDirty = true;

									if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

										tHash_Lookup_row4.lookup(row4HashKey);

									} // G_TM_M_091

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
									// and it contains more one result from keys : row4.Product_ID = '" +
									// row4HashKey.Product_ID + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									T = null;
									T2 = null;
									T1 = null;
									T3 = null;
									T4 = null;

// # Output table : 'T'
									T_tmp.Customer_Status = StringHandling.DOWNCASE(row4.Customer_Status);
									T_tmp.Quantity_Ordered = row4.Quantity_Ordered;
									T_tmp.Total_Retail_Price_for_This_Order = row4.Total_Retail_Price_for_This_Order;
									T_tmp.Cost_Price_Per_Unit = row4.Cost_Price_Per_Unit;
									T_tmp.Totalcost = row4.Quantity_Ordered * row4.Cost_Price_Per_Unit;
									T_tmp.Profit_per_order = row4.Total_Retail_Price_for_This_Order
											- (row4.Quantity_Ordered * row4.Cost_Price_Per_Unit);
									T = T_tmp;

// # Output table : 'T2'
									T2_tmp.Product_ID = row3.Product_ID;
									T2_tmp.Product_Category = row3.Product_Category;
									T2_tmp.Product_Group = row3.Product_Group;
									T2 = T2_tmp;

// # Output table : 'T1'
									T1_tmp.Product_Category = row3.Product_Category;
									T1_tmp.Total_Retail_Price_for_This_Order = row4.Total_Retail_Price_for_This_Order;
									T1_tmp.Quantity_Ordered = row4.Quantity_Ordered;
									T1_tmp.Cost_Price_Per_Unit = row4.Cost_Price_Per_Unit;
									T1_tmp.Profit = row4.Total_Retail_Price_for_This_Order
											- (row4.Quantity_Ordered * row4.Cost_Price_Per_Unit);
									T1 = T1_tmp;

// # Output table : 'T3'
									T3_tmp.Date_Order_was_placed = row4.Date_Order_was_placed;
									T3_tmp.Quantity_Ordered = row4.Quantity_Ordered;
									T3_tmp.profit = row4.Total_Retail_Price_for_This_Order
											- (row4.Cost_Price_Per_Unit * row4.Quantity_Ordered);
									T3_tmp.Total_Retail_Price_for_This_Order = row4.Total_Retail_Price_for_This_Order;
									T3_tmp.Order_ID = row4.Order_ID;
									T3 = T3_tmp;

// # Output table : 'T4'
									T4_tmp.Order_ID = row4.Order_ID;
									T4_tmp.Date_Order_was_placed = row4.Date_Order_was_placed;
									T4_tmp.Delivery_Date = row4.Delivery_Date;
									T4_tmp.Product_Category = row3.Product_Category;
									T4_tmp.Difference_Dates = 0;
									T4 = T4_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "T"
								if (T != null) {

									/**
									 * [tLogRow_3 main ] start
									 */

									currentComponent = "tLogRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "T"

										);
									}

///////////////////////		

									strBuffer_tLogRow_3 = new StringBuilder();

									if (T.Customer_Status != null) { //

										strBuffer_tLogRow_3.append(String.valueOf(T.Customer_Status));

									} //

									strBuffer_tLogRow_3.append("|");

									strBuffer_tLogRow_3.append(String.valueOf(T.Quantity_Ordered));

									strBuffer_tLogRow_3.append("|");

									strBuffer_tLogRow_3
											.append(FormatterUtils.formatUnwithE(T.Total_Retail_Price_for_This_Order));

									strBuffer_tLogRow_3.append("|");

									strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(T.Cost_Price_Per_Unit));

									strBuffer_tLogRow_3.append("|");

									strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(T.Totalcost));

									strBuffer_tLogRow_3.append("|");

									strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(T.Profit_per_order));

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_3 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
									}
									consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
									consoleOut_tLogRow_3.flush();
									nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

									row5 = T;

									tos_count_tLogRow_3++;

									/**
									 * [tLogRow_3 main ] stop
									 */

									/**
									 * [tLogRow_3 process_data_begin ] start
									 */

									currentComponent = "tLogRow_3";

									/**
									 * [tLogRow_3 process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_2_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_2";

									currentComponent = "tAggregateRow_2_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row5"

										);
									}

									operation_finder_tAggregateRow_2.Customer_Status = row5.Customer_Status;

									operation_finder_tAggregateRow_2.hashCodeDirty = true;

									operation_result_tAggregateRow_2 = hash_tAggregateRow_2
											.get(operation_finder_tAggregateRow_2);

									if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

										operation_result_tAggregateRow_2.Customer_Status = operation_finder_tAggregateRow_2.Customer_Status;

										hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
												operation_result_tAggregateRow_2);

									} // G_OutMain_AggR_001

									operation_result_tAggregateRow_2.Avg_Quantity_count++;

									operation_result_tAggregateRow_2.Avg_Quantity_sum += row5.Quantity_Ordered;

									operation_result_tAggregateRow_2.Avg_Retail_price_per_order_count++;

									if (operation_result_tAggregateRow_2.Avg_Retail_price_per_order_sum == null) {
										operation_result_tAggregateRow_2.Avg_Retail_price_per_order_sum = new BigDecimal(
												0).setScale(3);
									}
									operation_result_tAggregateRow_2.Avg_Retail_price_per_order_sum = operation_result_tAggregateRow_2.Avg_Retail_price_per_order_sum
											.add(new BigDecimal(
													String.valueOf(row5.Total_Retail_Price_for_This_Order)));

									if (operation_result_tAggregateRow_2.Total_cost_sum == null) {
										operation_result_tAggregateRow_2.Total_cost_sum = new BigDecimal(0);
									}
									operation_result_tAggregateRow_2.Total_cost_sum = operation_result_tAggregateRow_2.Total_cost_sum
											.add(new BigDecimal(String.valueOf(row5.Totalcost)));

									if (operation_result_tAggregateRow_2.Total_Retail_Sales_sum == null) {
										operation_result_tAggregateRow_2.Total_Retail_Sales_sum = new BigDecimal(0)
												.setScale(3);
									}
									operation_result_tAggregateRow_2.Total_Retail_Sales_sum = operation_result_tAggregateRow_2.Total_Retail_Sales_sum
											.add(new BigDecimal(
													String.valueOf(row5.Total_Retail_Price_for_This_Order)));

									if (operation_result_tAggregateRow_2.Total_Profit_sum == null) {
										operation_result_tAggregateRow_2.Total_Profit_sum = new BigDecimal(0)
												.setScale(5);
									}
									operation_result_tAggregateRow_2.Total_Profit_sum = operation_result_tAggregateRow_2.Total_Profit_sum
											.add(new BigDecimal(String.valueOf(row5.Profit_per_order)));

									tos_count_tAggregateRow_2_AGGOUT++;

									/**
									 * [tAggregateRow_2_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_2_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_2";

									currentComponent = "tAggregateRow_2_AGGOUT";

									/**
									 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_2_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_2";

									currentComponent = "tAggregateRow_2_AGGOUT";

									/**
									 * [tAggregateRow_2_AGGOUT process_data_end ] stop
									 */

									/**
									 * [tLogRow_3 process_data_end ] start
									 */

									currentComponent = "tLogRow_3";

									/**
									 * [tLogRow_3 process_data_end ] stop
									 */

								} // End of branch "T"

// Start of branch "T2"
								if (T2 != null) {

									/**
									 * [tLogRow_2 main ] start
									 */

									currentComponent = "tLogRow_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "T2"

										);
									}

///////////////////////		

									strBuffer_tLogRow_2 = new StringBuilder();

									if (T2.Product_ID != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(T2.Product_ID));

									} //

									strBuffer_tLogRow_2.append("|");

									if (T2.Product_Category != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(T2.Product_Category));

									} //

									strBuffer_tLogRow_2.append("|");

									if (T2.Product_Group != null) { //

										strBuffer_tLogRow_2.append(String.valueOf(T2.Product_Group));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_2 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
									}
									consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
									consoleOut_tLogRow_2.flush();
									nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

									row11 = T2;

									tos_count_tLogRow_2++;

									/**
									 * [tLogRow_2 main ] stop
									 */

									/**
									 * [tLogRow_2 process_data_begin ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_3_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_3";

									currentComponent = "tAggregateRow_3_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row11"

										);
									}

									operation_finder_tAggregateRow_3.Product_Category = row11.Product_Category;

									operation_finder_tAggregateRow_3.hashCodeDirty = true;

									operation_result_tAggregateRow_3 = hash_tAggregateRow_3
											.get(operation_finder_tAggregateRow_3);

									if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

										operation_result_tAggregateRow_3.Product_Category = operation_finder_tAggregateRow_3.Product_Category;

										hash_tAggregateRow_3.put(operation_result_tAggregateRow_3,
												operation_result_tAggregateRow_3);

									} // G_OutMain_AggR_001

									if (row11.Product_ID != null) { // G_OutMain_AggR_546

										operation_result_tAggregateRow_3.Nb_Product_Per_Category_clmCount++;
										operation_result_tAggregateRow_3.count++;

									} // G_OutMain_AggR_546

									tos_count_tAggregateRow_3_AGGOUT++;

									/**
									 * [tAggregateRow_3_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_3_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_3";

									currentComponent = "tAggregateRow_3_AGGOUT";

									/**
									 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_3_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_3";

									currentComponent = "tAggregateRow_3_AGGOUT";

									/**
									 * [tAggregateRow_3_AGGOUT process_data_end ] stop
									 */

									/**
									 * [tLogRow_2 process_data_end ] start
									 */

									currentComponent = "tLogRow_2";

									/**
									 * [tLogRow_2 process_data_end ] stop
									 */

								} // End of branch "T2"

// Start of branch "T1"
								if (T1 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "T1"

										);
									}

///////////////////////		

									strBuffer_tLogRow_1 = new StringBuilder();

									if (T1.Product_Category != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(T1.Product_Category));

									} //

									strBuffer_tLogRow_1.append("|");

									if (T1.Total_Retail_Price_for_This_Order != null) { //

										strBuffer_tLogRow_1.append(
												FormatterUtils.formatUnwithE(T1.Total_Retail_Price_for_This_Order));

									} //

									strBuffer_tLogRow_1.append("|");

									if (T1.Quantity_Ordered != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(T1.Quantity_Ordered));

									} //

									strBuffer_tLogRow_1.append("|");

									if (T1.Cost_Price_Per_Unit != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.formatUnwithE(T1.Cost_Price_Per_Unit));

									} //

									strBuffer_tLogRow_1.append("|");

									if (T1.Profit != null) { //

										strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(T1.Profit));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									row6 = T1;

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row6"

										);
									}

									operation_finder_tAggregateRow_1.Product_Category = row6.Product_Category;

									operation_finder_tAggregateRow_1.hashCodeDirty = true;

									operation_result_tAggregateRow_1 = hash_tAggregateRow_1
											.get(operation_finder_tAggregateRow_1);

									if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

										operation_result_tAggregateRow_1.Product_Category = operation_finder_tAggregateRow_1.Product_Category;

										hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
												operation_result_tAggregateRow_1);

									} // G_OutMain_AggR_001

									if (operation_result_tAggregateRow_1.Totalprofit_sum == null) {
										operation_result_tAggregateRow_1.Totalprofit_sum = new BigDecimal(0);
									}
									operation_result_tAggregateRow_1.Totalprofit_sum = operation_result_tAggregateRow_1.Totalprofit_sum
											.add(new BigDecimal(String.valueOf(row6.Profit)));

									tos_count_tAggregateRow_1_AGGOUT++;

									/**
									 * [tAggregateRow_1_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "T1"

// Start of branch "T3"
								if (T3 != null) {

									/**
									 * [tLogRow_7 main ] start
									 */

									currentComponent = "tLogRow_7";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "T3"

										);
									}

///////////////////////		

									strBuffer_tLogRow_7 = new StringBuilder();

									if (T3.Date_Order_was_placed != null) { //

										strBuffer_tLogRow_7.append(String.valueOf(T3.Date_Order_was_placed));

									} //

									strBuffer_tLogRow_7.append("|");

									strBuffer_tLogRow_7.append(String.valueOf(T3.Quantity_Ordered));

									strBuffer_tLogRow_7.append("|");

									strBuffer_tLogRow_7.append(FormatterUtils.formatUnwithE(T3.profit));

									strBuffer_tLogRow_7.append("|");

									strBuffer_tLogRow_7
											.append(FormatterUtils.formatUnwithE(T3.Total_Retail_Price_for_This_Order));

									strBuffer_tLogRow_7.append("|");

									strBuffer_tLogRow_7.append(String.valueOf(T3.Order_ID));

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_7 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
									}
									consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
									consoleOut_tLogRow_7.flush();
									nb_line_tLogRow_7++;
//////

//////                    

///////////////////////    			

									row15 = T3;

									tos_count_tLogRow_7++;

									/**
									 * [tLogRow_7 main ] stop
									 */

									/**
									 * [tLogRow_7 process_data_begin ] start
									 */

									currentComponent = "tLogRow_7";

									/**
									 * [tLogRow_7 process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_4_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_4";

									currentComponent = "tAggregateRow_4_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row15"

										);
									}

									operation_finder_tAggregateRow_4.Date_Order_was_placed = row15.Date_Order_was_placed;

									operation_finder_tAggregateRow_4.hashCodeDirty = true;

									operation_result_tAggregateRow_4 = hash_tAggregateRow_4
											.get(operation_finder_tAggregateRow_4);

									if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

										operation_result_tAggregateRow_4.Date_Order_was_placed = operation_finder_tAggregateRow_4.Date_Order_was_placed;

										hash_tAggregateRow_4.put(operation_result_tAggregateRow_4,
												operation_result_tAggregateRow_4);

									} // G_OutMain_AggR_001

									operation_result_tAggregateRow_4.Order_Sum_clmCount++;
									operation_result_tAggregateRow_4.count++;

									operation_result_tAggregateRow_4.Quantity_Ordered_Sum_sum += row15.Quantity_Ordered;

									if (operation_result_tAggregateRow_4.profit_Per_day_sum == null) {
										operation_result_tAggregateRow_4.profit_Per_day_sum = new BigDecimal(0);
									}
									operation_result_tAggregateRow_4.profit_Per_day_sum = operation_result_tAggregateRow_4.profit_Per_day_sum
											.add(new BigDecimal(String.valueOf(row15.profit)));

									if (operation_result_tAggregateRow_4.Total_Retail_Price_for_This_Order_Sum_sum == null) {
										operation_result_tAggregateRow_4.Total_Retail_Price_for_This_Order_Sum_sum = new BigDecimal(
												0).setScale(3);
									}
									operation_result_tAggregateRow_4.Total_Retail_Price_for_This_Order_Sum_sum = operation_result_tAggregateRow_4.Total_Retail_Price_for_This_Order_Sum_sum
											.add(new BigDecimal(
													String.valueOf(row15.Total_Retail_Price_for_This_Order)));

									tos_count_tAggregateRow_4_AGGOUT++;

									/**
									 * [tAggregateRow_4_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_4_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_4";

									currentComponent = "tAggregateRow_4_AGGOUT";

									/**
									 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_4_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_4";

									currentComponent = "tAggregateRow_4_AGGOUT";

									/**
									 * [tAggregateRow_4_AGGOUT process_data_end ] stop
									 */

									/**
									 * [tLogRow_7 process_data_end ] start
									 */

									currentComponent = "tLogRow_7";

									/**
									 * [tLogRow_7 process_data_end ] stop
									 */

								} // End of branch "T3"

// Start of branch "T4"
								if (T4 != null) {

									/**
									 * [tLogRow_12 main ] start
									 */

									currentComponent = "tLogRow_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "T4"

										);
									}

///////////////////////		

									strBuffer_tLogRow_12 = new StringBuilder();

									strBuffer_tLogRow_12.append(String.valueOf(T4.Order_ID));

									strBuffer_tLogRow_12.append("|");

									if (T4.Date_Order_was_placed != null) { //

										strBuffer_tLogRow_12.append(String.valueOf(T4.Date_Order_was_placed));

									} //

									strBuffer_tLogRow_12.append("|");

									if (T4.Delivery_Date != null) { //

										strBuffer_tLogRow_12.append(String.valueOf(T4.Delivery_Date));

									} //

									strBuffer_tLogRow_12.append("|");

									if (T4.Product_Category != null) { //

										strBuffer_tLogRow_12.append(String.valueOf(T4.Product_Category));

									} //

									strBuffer_tLogRow_12.append("|");

									strBuffer_tLogRow_12.append(String.valueOf(T4.Difference_Dates));

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_12 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_12);
									}
									consoleOut_tLogRow_12.println(strBuffer_tLogRow_12.toString());
									consoleOut_tLogRow_12.flush();
									nb_line_tLogRow_12++;
//////

//////                    

///////////////////////    			

									row23 = T4;

									tos_count_tLogRow_12++;

									/**
									 * [tLogRow_12 main ] stop
									 */

									/**
									 * [tLogRow_12 process_data_begin ] start
									 */

									currentComponent = "tLogRow_12";

									/**
									 * [tLogRow_12 process_data_begin ] stop
									 */

									/**
									 * [tFilterRow_3 main ] start
									 */

									currentComponent = "tFilterRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row23"

										);
									}

									row27 = null;
									Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
									ope_tFilterRow_3.matches(
											(row23.Date_Order_was_placed == null ? false
													: row23.Date_Order_was_placed.length() > 0),
											" Date_Order_was_placed.length() > 0 failed");

									if (ope_tFilterRow_3.getMatchFlag()) {
										if (row27 == null) {
											row27 = new row27Struct();
										}
										row27.Order_ID = row23.Order_ID;
										row27.Date_Order_was_placed = row23.Date_Order_was_placed;
										row27.Delivery_Date = row23.Delivery_Date;
										row27.Product_Category = row23.Product_Category;
										row27.Difference_Dates = row23.Difference_Dates;
										nb_line_ok_tFilterRow_3++;
									} else {
										nb_line_reject_tFilterRow_3++;
									}

									nb_line_tFilterRow_3++;

									tos_count_tFilterRow_3++;

									/**
									 * [tFilterRow_3 main ] stop
									 */

									/**
									 * [tFilterRow_3 process_data_begin ] start
									 */

									currentComponent = "tFilterRow_3";

									/**
									 * [tFilterRow_3 process_data_begin ] stop
									 */
// Start of branch "row27"
									if (row27 != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row27"

											);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
											// ###############################
											// # Output tables

											Td = null;

// # Output table : 'Td'
											Td_tmp.Order_ID = row27.Order_ID;
											Td_tmp.Date_Order_was_placed = TalendDate.parseDate("dd-MMM-yy",
													row27.Date_Order_was_placed);
											Td_tmp.Delivery_Date = TalendDate.parseDate("dd-MMM-yy",
													row27.Delivery_Date);
											Td_tmp.Product_Category = row27.Product_Category;
											Td_tmp.Difference_Dates = TalendDate.diffDate(
													TalendDate.parseDate("dd-MMM-yy", row27.Delivery_Date),
													TalendDate.parseDate("dd-MMM-yy", row27.Date_Order_was_placed),
													"dd");
											Td = Td_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_3 = false;

										tos_count_tMap_3++;

										/**
										 * [tMap_3 main ] stop
										 */

										/**
										 * [tMap_3 process_data_begin ] start
										 */

										currentComponent = "tMap_3";

										/**
										 * [tMap_3 process_data_begin ] stop
										 */
// Start of branch "Td"
										if (Td != null) {

											/**
											 * [tLogRow_14 main ] start
											 */

											currentComponent = "tLogRow_14";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "Td"

												);
											}

///////////////////////		

											strBuffer_tLogRow_14 = new StringBuilder();

											strBuffer_tLogRow_14.append(String.valueOf(Td.Order_ID));

											strBuffer_tLogRow_14.append("|");

											if (Td.Date_Order_was_placed != null) { //

												strBuffer_tLogRow_14.append(FormatterUtils
														.format_Date(Td.Date_Order_was_placed, "dd-MMM-yy"));

											} //

											strBuffer_tLogRow_14.append("|");

											if (Td.Delivery_Date != null) { //

												strBuffer_tLogRow_14.append(
														FormatterUtils.format_Date(Td.Delivery_Date, "dd-MMM-yy"));

											} //

											strBuffer_tLogRow_14.append("|");

											if (Td.Product_Category != null) { //

												strBuffer_tLogRow_14.append(String.valueOf(Td.Product_Category));

											} //

											strBuffer_tLogRow_14.append("|");

											strBuffer_tLogRow_14.append(String.valueOf(Td.Difference_Dates));

											if (globalMap.get("tLogRow_CONSOLE") != null) {
												consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap
														.get("tLogRow_CONSOLE");
											} else {
												consoleOut_tLogRow_14 = new java.io.PrintStream(
														new java.io.BufferedOutputStream(System.out));
												globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_14);
											}
											consoleOut_tLogRow_14.println(strBuffer_tLogRow_14.toString());
											consoleOut_tLogRow_14.flush();
											nb_line_tLogRow_14++;
//////

//////                    

///////////////////////    			

											row26 = Td;

											tos_count_tLogRow_14++;

											/**
											 * [tLogRow_14 main ] stop
											 */

											/**
											 * [tLogRow_14 process_data_begin ] start
											 */

											currentComponent = "tLogRow_14";

											/**
											 * [tLogRow_14 process_data_begin ] stop
											 */

											/**
											 * [tAggregateRow_5_AGGOUT main ] start
											 */

											currentVirtualComponent = "tAggregateRow_5";

											currentComponent = "tAggregateRow_5_AGGOUT";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "row26"

												);
											}

											operation_finder_tAggregateRow_5.Product_Category = row26.Product_Category;

											operation_finder_tAggregateRow_5.hashCodeDirty = true;

											operation_result_tAggregateRow_5 = hash_tAggregateRow_5
													.get(operation_finder_tAggregateRow_5);

											if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

												operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

												operation_result_tAggregateRow_5.Product_Category = operation_finder_tAggregateRow_5.Product_Category;

												hash_tAggregateRow_5.put(operation_result_tAggregateRow_5,
														operation_result_tAggregateRow_5);

											} // G_OutMain_AggR_001

											operation_result_tAggregateRow_5.Avg_Delivery_count++;

											operation_result_tAggregateRow_5.Avg_Delivery_sum += row26.Difference_Dates;

											tos_count_tAggregateRow_5_AGGOUT++;

											/**
											 * [tAggregateRow_5_AGGOUT main ] stop
											 */

											/**
											 * [tAggregateRow_5_AGGOUT process_data_begin ] start
											 */

											currentVirtualComponent = "tAggregateRow_5";

											currentComponent = "tAggregateRow_5_AGGOUT";

											/**
											 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
											 */

											/**
											 * [tAggregateRow_5_AGGOUT process_data_end ] start
											 */

											currentVirtualComponent = "tAggregateRow_5";

											currentComponent = "tAggregateRow_5_AGGOUT";

											/**
											 * [tAggregateRow_5_AGGOUT process_data_end ] stop
											 */

											/**
											 * [tLogRow_14 process_data_end ] start
											 */

											currentComponent = "tLogRow_14";

											/**
											 * [tLogRow_14 process_data_end ] stop
											 */

										} // End of branch "Td"

										/**
										 * [tMap_3 process_data_end ] start
										 */

										currentComponent = "tMap_3";

										/**
										 * [tMap_3 process_data_end ] stop
										 */

									} // End of branch "row27"

									/**
									 * [tFilterRow_3 process_data_end ] start
									 */

									currentComponent = "tFilterRow_3";

									/**
									 * [tFilterRow_3 process_data_end ] stop
									 */

									/**
									 * [tLogRow_12 process_data_end ] start
									 */

									currentComponent = "tLogRow_12";

									/**
									 * [tLogRow_12 process_data_end ] stop
									 */

								} // End of branch "T4"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tUniqRow_2 process_data_end ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/Mega-PC/Desktop/Bi_project/data/product-supplier.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "T");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/Mega-PC/Desktop/Bi_project/outputfiles/Sales_Per_Customer_Status.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("Avg_Quantity");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Avg_Retail_price_per_order");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Total_Retail_Sales");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Total_cost");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Customer_Status");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Total_Profit");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
				java.io.PrintStream consoleOut_tLogRow_5 = null;

				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					if (aggregated_row_tAggregateRow_2.Avg_Quantity_count > 0) {

						double row9_Avg_Quantity_temp = (double) aggregated_row_tAggregateRow_2.Avg_Quantity_sum
								/ (double) aggregated_row_tAggregateRow_2.Avg_Quantity_count;

						row9.Avg_Quantity = (int) row9_Avg_Quantity_temp;

					} else {
						String count = "0";

						row9.Avg_Quantity = ParserUtils.parseTo_int(count);

					}
					if (aggregated_row_tAggregateRow_2.Avg_Retail_price_per_order_count > 0) {

						row9.Avg_Retail_price_per_order = aggregated_row_tAggregateRow_2.Avg_Retail_price_per_order_sum
								.divide(new BigDecimal(String
										.valueOf(aggregated_row_tAggregateRow_2.Avg_Retail_price_per_order_count)), 3,
										BigDecimal.ROUND_HALF_UP)

								.floatValue()

						;

					} else {
						String count = "0";

						row9.Avg_Retail_price_per_order = ParserUtils.parseTo_float(count);

					}
					if (aggregated_row_tAggregateRow_2.Total_Retail_Sales_sum != null) {
						row9.Total_Retail_Sales = aggregated_row_tAggregateRow_2.Total_Retail_Sales_sum.floatValue();

					} else {

						row9.Total_Retail_Sales = 0;

					}

					if (aggregated_row_tAggregateRow_2.Total_cost_sum != null) {
						row9.Total_cost = aggregated_row_tAggregateRow_2.Total_cost_sum.floatValue();

					} else {

						row9.Total_cost = 0;

					}

					row9.Customer_Status = aggregated_row_tAggregateRow_2.Customer_Status;

					if (aggregated_row_tAggregateRow_2.Total_Profit_sum != null) {
						row9.Total_Profit = aggregated_row_tAggregateRow_2.Total_Profit_sum.floatValue();

					} else {

						row9.Total_Profit = 0;

					}

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_5 main ] start
					 */

					currentComponent = "tLogRow_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row9"

						);
					}

///////////////////////		

					strBuffer_tLogRow_5 = new StringBuilder();

					strBuffer_tLogRow_5.append(String.valueOf(row9.Avg_Quantity));

					strBuffer_tLogRow_5.append("|");

					strBuffer_tLogRow_5.append(FormatterUtils.formatUnwithE(row9.Avg_Retail_price_per_order));

					strBuffer_tLogRow_5.append("|");

					strBuffer_tLogRow_5.append(FormatterUtils.formatUnwithE(row9.Total_Retail_Sales));

					strBuffer_tLogRow_5.append("|");

					strBuffer_tLogRow_5.append(FormatterUtils.formatUnwithE(row9.Total_cost));

					strBuffer_tLogRow_5.append("|");

					if (row9.Customer_Status != null) { //

						strBuffer_tLogRow_5.append(String.valueOf(row9.Customer_Status));

					} //

					strBuffer_tLogRow_5.append("|");

					strBuffer_tLogRow_5.append(FormatterUtils.formatUnwithE(row9.Total_Profit));

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
					}
					consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
					consoleOut_tLogRow_5.flush();
					nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

					row10 = row9;

					tos_count_tLogRow_5++;

					/**
					 * [tLogRow_5 main ] stop
					 */

					/**
					 * [tLogRow_5 process_data_begin ] start
					 */

					currentComponent = "tLogRow_5";

					/**
					 * [tLogRow_5 process_data_begin ] stop
					 */

					/**
					 * [tFilterRow_1 main ] start
					 */

					currentComponent = "tFilterRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row10"

						);
					}

					row14 = null;
					Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
					ope_tFilterRow_1.matches(
							(row10.Customer_Status == null ? false : row10.Customer_Status.length() != 1),
							" Customer_Status.length() != 1 failed");

					if (ope_tFilterRow_1.getMatchFlag()) {
						if (row14 == null) {
							row14 = new row14Struct();
						}
						row14.Avg_Quantity = row10.Avg_Quantity;
						row14.Avg_Retail_price_per_order = row10.Avg_Retail_price_per_order;
						row14.Total_Retail_Sales = row10.Total_Retail_Sales;
						row14.Total_cost = row10.Total_cost;
						row14.Customer_Status = row10.Customer_Status;
						row14.Total_Profit = row10.Total_Profit;
						nb_line_ok_tFilterRow_1++;
					} else {
						nb_line_reject_tFilterRow_1++;
					}

					nb_line_tFilterRow_1++;

					tos_count_tFilterRow_1++;

					/**
					 * [tFilterRow_1 main ] stop
					 */

					/**
					 * [tFilterRow_1 process_data_begin ] start
					 */

					currentComponent = "tFilterRow_1";

					/**
					 * [tFilterRow_1 process_data_begin ] stop
					 */
// Start of branch "row14"
					if (row14 != null) {

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row14"

							);
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						sb_tFileOutputDelimited_3.append(row14.Avg_Quantity);
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						sb_tFileOutputDelimited_3.append(row14.Avg_Retail_price_per_order);
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						sb_tFileOutputDelimited_3.append(row14.Total_Retail_Sales);
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						sb_tFileOutputDelimited_3.append(row14.Total_cost);
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row14.Customer_Status != null) {
							sb_tFileOutputDelimited_3.append(row14.Customer_Status);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						sb_tFileOutputDelimited_3.append(row14.Total_Profit);
						sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

					} // End of branch "row14"

					/**
					 * [tFilterRow_1 process_data_end ] start
					 */

					currentComponent = "tFilterRow_1";

					/**
					 * [tFilterRow_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_5 process_data_end ] start
					 */

					currentComponent = "tLogRow_5";

					/**
					 * [tLogRow_5 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "T2");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/Mega-PC/Desktop/Bi_project/outputfiles/Prouduct_per_category.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("Product_Category");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Nb_Product_Per_Category");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tLogRow_6 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
				java.io.PrintStream consoleOut_tLogRow_6 = null;

				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
///////////////////////    			

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					row12.Product_Category = aggregated_row_tAggregateRow_3.Product_Category;
					row12.Nb_Product_Per_Category = (int) aggregated_row_tAggregateRow_3.count;
					row12.Nb_Product_Per_Category = (int) aggregated_row_tAggregateRow_3.Nb_Product_Per_Category_clmCount;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_6 main ] start
					 */

					currentComponent = "tLogRow_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row12"

						);
					}

///////////////////////		

					strBuffer_tLogRow_6 = new StringBuilder();

					if (row12.Product_Category != null) { //

						strBuffer_tLogRow_6.append(String.valueOf(row12.Product_Category));

					} //

					strBuffer_tLogRow_6.append("|");

					if (row12.Nb_Product_Per_Category != null) { //

						strBuffer_tLogRow_6.append(String.valueOf(row12.Nb_Product_Per_Category));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
					}
					consoleOut_tLogRow_6.println(strBuffer_tLogRow_6.toString());
					consoleOut_tLogRow_6.flush();
					nb_line_tLogRow_6++;
//////

//////                    

///////////////////////    			

					row13 = row12;

					tos_count_tLogRow_6++;

					/**
					 * [tLogRow_6 main ] stop
					 */

					/**
					 * [tLogRow_6 process_data_begin ] start
					 */

					currentComponent = "tLogRow_6";

					/**
					 * [tLogRow_6 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row13"

						);
					}

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row13.Product_Category != null) {
						sb_tFileOutputDelimited_2.append(row13.Product_Category);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row13.Nb_Product_Per_Category != null) {
						sb_tFileOutputDelimited_2.append(row13.Nb_Product_Per_Category);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					/**
					 * [tFileOutputDelimited_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					/**
					 * [tFileOutputDelimited_2 process_data_end ] stop
					 */

					/**
					 * [tLogRow_6 process_data_end ] start
					 */

					currentComponent = "tLogRow_6";

					/**
					 * [tLogRow_6 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

//////
//////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "T1");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Users/Mega-PC/Desktop/Bi_project/outputfiles/profit_per_category.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("Totalprofit");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Product_Category");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
				java.io.PrintStream consoleOut_tLogRow_4 = null;

				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					if (aggregated_row_tAggregateRow_1.Totalprofit_sum != null) {
						row7.Totalprofit = aggregated_row_tAggregateRow_1.Totalprofit_sum.floatValue();

					} else {

						row7.Totalprofit = null;

					}

					row7.Product_Category = aggregated_row_tAggregateRow_1.Product_Category;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_4 main ] start
					 */

					currentComponent = "tLogRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row7"

						);
					}

///////////////////////		

					strBuffer_tLogRow_4 = new StringBuilder();

					strBuffer_tLogRow_4.append(FormatterUtils.formatUnwithE(row7.Totalprofit));

					strBuffer_tLogRow_4.append("|");

					if (row7.Product_Category != null) { //

						strBuffer_tLogRow_4.append(String.valueOf(row7.Product_Category));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
					}
					consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
					consoleOut_tLogRow_4.flush();
					nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

					row8 = row7;

					tos_count_tLogRow_4++;

					/**
					 * [tLogRow_4 main ] stop
					 */

					/**
					 * [tLogRow_4 process_data_begin ] start
					 */

					currentComponent = "tLogRow_4";

					/**
					 * [tLogRow_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row8"

						);
					}

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
					sb_tFileOutputDelimited_1.append(row8.Totalprofit);
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row8.Product_Category != null) {
						sb_tFileOutputDelimited_1.append(row8.Product_Category);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_4 process_data_end ] start
					 */

					currentComponent = "tLogRow_4";

					/**
					 * [tLogRow_4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

//////
//////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "T3");
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow20Struct extends row20Struct implements Comparable<Comparablerow20Struct> {

					public int compareTo(Comparablerow20Struct other) {

						if (this.Date_Order_was_placed == null && other.Date_Order_was_placed != null) {
							return -1;

						} else if (this.Date_Order_was_placed != null && other.Date_Order_was_placed == null) {
							return 1;

						} else if (this.Date_Order_was_placed != null && other.Date_Order_was_placed != null) {
							if (!this.Date_Order_was_placed.equals(other.Date_Order_was_placed)) {
								return this.Date_Order_was_placed.compareTo(other.Date_Order_was_placed);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow20Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow20Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tLogRow_10 begin ] start
				 */

				ok_Hash.put("tLogRow_10", false);
				start_Hash.put("tLogRow_10", System.currentTimeMillis());

				currentComponent = "tLogRow_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "TS");
				}

				int tos_count_tLogRow_10 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
				java.io.PrintStream consoleOut_tLogRow_10 = null;

				StringBuilder strBuffer_tLogRow_10 = null;
				int nb_line_tLogRow_10 = 0;
///////////////////////    			

				/**
				 * [tLogRow_10 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				TSStruct TS_tmp = new TSStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tLogRow_9 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
				java.io.PrintStream consoleOut_tLogRow_9 = null;

				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
///////////////////////    			

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tLogRow_8 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = "|";
				java.io.PrintStream consoleOut_tLogRow_8 = null;

				StringBuilder strBuffer_tLogRow_8 = null;
				int nb_line_tLogRow_8 = 0;
///////////////////////    			

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					row16.Date_Order_was_placed = aggregated_row_tAggregateRow_4.Date_Order_was_placed;
					row16.Order_Sum = (int) aggregated_row_tAggregateRow_4.count;
					row16.Order_Sum = (int) aggregated_row_tAggregateRow_4.Order_Sum_clmCount;
					row16.Quantity_Ordered_Sum = aggregated_row_tAggregateRow_4.Quantity_Ordered_Sum_sum;

					if (aggregated_row_tAggregateRow_4.profit_Per_day_sum != null) {
						row16.profit_Per_day = aggregated_row_tAggregateRow_4.profit_Per_day_sum.floatValue();

					} else {

						row16.profit_Per_day = 0;

					}

					if (aggregated_row_tAggregateRow_4.Total_Retail_Price_for_This_Order_Sum_sum != null) {
						row16.Total_Retail_Price_for_This_Order_Sum = aggregated_row_tAggregateRow_4.Total_Retail_Price_for_This_Order_Sum_sum
								.floatValue();

					} else {

						row16.Total_Retail_Price_for_This_Order_Sum = 0;

					}

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_8 main ] start
					 */

					currentComponent = "tLogRow_8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row16"

						);
					}

///////////////////////		

					strBuffer_tLogRow_8 = new StringBuilder();

					if (row16.Date_Order_was_placed != null) { //

						strBuffer_tLogRow_8.append(String.valueOf(row16.Date_Order_was_placed));

					} //

					strBuffer_tLogRow_8.append("|");

					strBuffer_tLogRow_8.append(String.valueOf(row16.Order_Sum));

					strBuffer_tLogRow_8.append("|");

					strBuffer_tLogRow_8.append(String.valueOf(row16.Quantity_Ordered_Sum));

					strBuffer_tLogRow_8.append("|");

					strBuffer_tLogRow_8.append(FormatterUtils.formatUnwithE(row16.profit_Per_day));

					strBuffer_tLogRow_8.append("|");

					strBuffer_tLogRow_8
							.append(FormatterUtils.formatUnwithE(row16.Total_Retail_Price_for_This_Order_Sum));

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_8);
					}
					consoleOut_tLogRow_8.println(strBuffer_tLogRow_8.toString());
					consoleOut_tLogRow_8.flush();
					nb_line_tLogRow_8++;
//////

//////                    

///////////////////////    			

					row17 = row16;

					tos_count_tLogRow_8++;

					/**
					 * [tLogRow_8 main ] stop
					 */

					/**
					 * [tLogRow_8 process_data_begin ] start
					 */

					currentComponent = "tLogRow_8";

					/**
					 * [tLogRow_8 process_data_begin ] stop
					 */

					/**
					 * [tFilterRow_2 main ] start
					 */

					currentComponent = "tFilterRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row17"

						);
					}

					row18 = null;
					Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
					ope_tFilterRow_2.matches(
							(row17.Date_Order_was_placed == null ? false : row17.Date_Order_was_placed.length() != 0),
							" Date_Order_was_placed.length() != 0 failed");

					if (ope_tFilterRow_2.getMatchFlag()) {
						if (row18 == null) {
							row18 = new row18Struct();
						}
						row18.Date_Order_was_placed = row17.Date_Order_was_placed;
						row18.Order_Sum = row17.Order_Sum;
						row18.Quantity_Ordered_Sum = row17.Quantity_Ordered_Sum;
						row18.profit_Per_day = row17.profit_Per_day;
						row18.Total_Retail_Price_for_This_Order_Sum = row17.Total_Retail_Price_for_This_Order_Sum;
						nb_line_ok_tFilterRow_2++;
					} else {
						nb_line_reject_tFilterRow_2++;
					}

					nb_line_tFilterRow_2++;

					tos_count_tFilterRow_2++;

					/**
					 * [tFilterRow_2 main ] stop
					 */

					/**
					 * [tFilterRow_2 process_data_begin ] start
					 */

					currentComponent = "tFilterRow_2";

					/**
					 * [tFilterRow_2 process_data_begin ] stop
					 */
// Start of branch "row18"
					if (row18 != null) {

						/**
						 * [tLogRow_9 main ] start
						 */

						currentComponent = "tLogRow_9";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row18"

							);
						}

///////////////////////		

						strBuffer_tLogRow_9 = new StringBuilder();

						if (row18.Date_Order_was_placed != null) { //

							strBuffer_tLogRow_9.append(String.valueOf(row18.Date_Order_was_placed));

						} //

						strBuffer_tLogRow_9.append("|");

						strBuffer_tLogRow_9.append(String.valueOf(row18.Order_Sum));

						strBuffer_tLogRow_9.append("|");

						strBuffer_tLogRow_9.append(String.valueOf(row18.Quantity_Ordered_Sum));

						strBuffer_tLogRow_9.append("|");

						strBuffer_tLogRow_9.append(FormatterUtils.formatUnwithE(row18.profit_Per_day));

						strBuffer_tLogRow_9.append("|");

						strBuffer_tLogRow_9
								.append(FormatterUtils.formatUnwithE(row18.Total_Retail_Price_for_This_Order_Sum));

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_9);
						}
						consoleOut_tLogRow_9.println(strBuffer_tLogRow_9.toString());
						consoleOut_tLogRow_9.flush();
						nb_line_tLogRow_9++;
//////

//////                    

///////////////////////    			

						row19 = row18;

						tos_count_tLogRow_9++;

						/**
						 * [tLogRow_9 main ] stop
						 */

						/**
						 * [tLogRow_9 process_data_begin ] start
						 */

						currentComponent = "tLogRow_9";

						/**
						 * [tLogRow_9 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row19"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							TS = null;

// # Output table : 'TS'
							TS_tmp.Date_Order_was_placed = TalendDate.parseDate("dd-MMM-yy",
									row19.Date_Order_was_placed);
							TS_tmp.Order_Sum = row19.Order_Sum;
							TS_tmp.Quantity_Ordered_Sum = row19.Quantity_Ordered_Sum;
							TS_tmp.profit_Per_day = row19.profit_Per_day;
							TS_tmp.Total_Retail_Price_for_This_Order_Sum = row19.Total_Retail_Price_for_This_Order_Sum;
							TS = TS_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "TS"
						if (TS != null) {

							/**
							 * [tLogRow_10 main ] start
							 */

							currentComponent = "tLogRow_10";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "TS"

								);
							}

///////////////////////		

							strBuffer_tLogRow_10 = new StringBuilder();

							if (TS.Date_Order_was_placed != null) { //

								strBuffer_tLogRow_10
										.append(FormatterUtils.format_Date(TS.Date_Order_was_placed, "dd-MMM-yy"));

							} //

							strBuffer_tLogRow_10.append("|");

							strBuffer_tLogRow_10.append(String.valueOf(TS.Order_Sum));

							strBuffer_tLogRow_10.append("|");

							strBuffer_tLogRow_10.append(String.valueOf(TS.Quantity_Ordered_Sum));

							strBuffer_tLogRow_10.append("|");

							strBuffer_tLogRow_10.append(FormatterUtils.formatUnwithE(TS.profit_Per_day));

							strBuffer_tLogRow_10.append("|");

							strBuffer_tLogRow_10
									.append(FormatterUtils.formatUnwithE(TS.Total_Retail_Price_for_This_Order_Sum));

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_10 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(System.out));
								globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_10);
							}
							consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
							consoleOut_tLogRow_10.flush();
							nb_line_tLogRow_10++;
//////

//////                    

///////////////////////    			

							row20 = TS;

							tos_count_tLogRow_10++;

							/**
							 * [tLogRow_10 main ] stop
							 */

							/**
							 * [tLogRow_10 process_data_begin ] start
							 */

							currentComponent = "tLogRow_10";

							/**
							 * [tLogRow_10 process_data_begin ] stop
							 */

							/**
							 * [tSortRow_1_SortOut main ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row20"

								);
							}

							Comparablerow20Struct arrayRowtSortRow_1_SortOut = new Comparablerow20Struct();

							arrayRowtSortRow_1_SortOut.Date_Order_was_placed = row20.Date_Order_was_placed;
							arrayRowtSortRow_1_SortOut.Order_Sum = row20.Order_Sum;
							arrayRowtSortRow_1_SortOut.Quantity_Ordered_Sum = row20.Quantity_Ordered_Sum;
							arrayRowtSortRow_1_SortOut.profit_Per_day = row20.profit_Per_day;
							arrayRowtSortRow_1_SortOut.Total_Retail_Price_for_This_Order_Sum = row20.Total_Retail_Price_for_This_Order_Sum;
							list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

							tos_count_tSortRow_1_SortOut++;

							/**
							 * [tSortRow_1_SortOut main ] stop
							 */

							/**
							 * [tSortRow_1_SortOut process_data_begin ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							/**
							 * [tSortRow_1_SortOut process_data_begin ] stop
							 */

							/**
							 * [tSortRow_1_SortOut process_data_end ] start
							 */

							currentVirtualComponent = "tSortRow_1";

							currentComponent = "tSortRow_1_SortOut";

							/**
							 * [tSortRow_1_SortOut process_data_end ] stop
							 */

							/**
							 * [tLogRow_10 process_data_end ] start
							 */

							currentComponent = "tLogRow_10";

							/**
							 * [tLogRow_10 process_data_end ] stop
							 */

						} // End of branch "TS"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tLogRow_9 process_data_end ] start
						 */

						currentComponent = "tLogRow_9";

						/**
						 * [tLogRow_9 process_data_end ] stop
						 */

					} // End of branch "row18"

					/**
					 * [tFilterRow_2 process_data_end ] start
					 */

					currentComponent = "tFilterRow_2";

					/**
					 * [tFilterRow_2 process_data_end ] stop
					 */

					/**
					 * [tLogRow_8 process_data_end ] start
					 */

					currentComponent = "tLogRow_8";

					/**
					 * [tLogRow_8 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

//////
//////
				globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

//////
//////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLogRow_10 end ] start
				 */

				currentComponent = "tLogRow_10";

//////
//////
				globalMap.put("tLogRow_10_NB_LINE", nb_line_tLogRow_10);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "TS");
				}

				ok_Hash.put("tLogRow_10", true);
				end_Hash.put("tLogRow_10", System.currentTimeMillis());

				/**
				 * [tLogRow_10 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row20Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow20Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/Users/Mega-PC/Desktop/Bi_project/outputfiles/daily_Status.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("Date_Order_was_placed");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Order_Sum");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Quantity_Ordered_Sum");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("profit_Per_day");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Total_Retail_Price_for_This_Order_Sum");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tLogRow_11 begin ] start
				 */

				ok_Hash.put("tLogRow_11", false);
				start_Hash.put("tLogRow_11", System.currentTimeMillis());

				currentComponent = "tLogRow_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tLogRow_11 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_11 = "|";
				java.io.PrintStream consoleOut_tLogRow_11 = null;

				StringBuilder strBuffer_tLogRow_11 = null;
				int nb_line_tLogRow_11 = 0;
///////////////////////    			

				/**
				 * [tLogRow_11 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row20Struct[] array_tSortRow_1_SortIn = (row20Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row20Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row21.Date_Order_was_placed = current_tSortRow_1_SortIn.Date_Order_was_placed;
					row21.Order_Sum = current_tSortRow_1_SortIn.Order_Sum;
					row21.Quantity_Ordered_Sum = current_tSortRow_1_SortIn.Quantity_Ordered_Sum;
					row21.profit_Per_day = current_tSortRow_1_SortIn.profit_Per_day;
					row21.Total_Retail_Price_for_This_Order_Sum = current_tSortRow_1_SortIn.Total_Retail_Price_for_This_Order_Sum;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tLogRow_11 main ] start
					 */

					currentComponent = "tLogRow_11";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row21"

						);
					}

///////////////////////		

					strBuffer_tLogRow_11 = new StringBuilder();

					if (row21.Date_Order_was_placed != null) { //

						strBuffer_tLogRow_11
								.append(FormatterUtils.format_Date(row21.Date_Order_was_placed, "dd-MMM-yy"));

					} //

					strBuffer_tLogRow_11.append("|");

					strBuffer_tLogRow_11.append(String.valueOf(row21.Order_Sum));

					strBuffer_tLogRow_11.append("|");

					strBuffer_tLogRow_11.append(String.valueOf(row21.Quantity_Ordered_Sum));

					strBuffer_tLogRow_11.append("|");

					strBuffer_tLogRow_11.append(FormatterUtils.formatUnwithE(row21.profit_Per_day));

					strBuffer_tLogRow_11.append("|");

					strBuffer_tLogRow_11
							.append(FormatterUtils.formatUnwithE(row21.Total_Retail_Price_for_This_Order_Sum));

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_11);
					}
					consoleOut_tLogRow_11.println(strBuffer_tLogRow_11.toString());
					consoleOut_tLogRow_11.flush();
					nb_line_tLogRow_11++;
//////

//////                    

///////////////////////    			

					row22 = row21;

					tos_count_tLogRow_11++;

					/**
					 * [tLogRow_11 main ] stop
					 */

					/**
					 * [tLogRow_11 process_data_begin ] start
					 */

					currentComponent = "tLogRow_11";

					/**
					 * [tLogRow_11 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 main ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row22"

						);
					}

					StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
					if (row22.Date_Order_was_placed != null) {
						sb_tFileOutputDelimited_4
								.append(FormatterUtils.format_Date(row22.Date_Order_was_placed, "dd-MMM-yy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					sb_tFileOutputDelimited_4.append(row22.Order_Sum);
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					sb_tFileOutputDelimited_4.append(row22.Quantity_Ordered_Sum);
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					sb_tFileOutputDelimited_4.append(row22.profit_Per_day);
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					sb_tFileOutputDelimited_4.append(row22.Total_Retail_Price_for_This_Order_Sum);
					sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

					nb_line_tFileOutputDelimited_4++;
					resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

					outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

					tos_count_tFileOutputDelimited_4++;

					/**
					 * [tFileOutputDelimited_4 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_end ] stop
					 */

					/**
					 * [tLogRow_11 process_data_end ] start
					 */

					currentComponent = "tLogRow_11";

					/**
					 * [tLogRow_11 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tLogRow_11 end ] start
				 */

				currentComponent = "tLogRow_11";

//////
//////
				globalMap.put("tLogRow_11_NB_LINE", nb_line_tLogRow_11);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tLogRow_11", true);
				end_Hash.put("tLogRow_11", System.currentTimeMillis());

				/**
				 * [tLogRow_11 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tLogRow_12 end ] start
				 */

				currentComponent = "tLogRow_12";

//////
//////
				globalMap.put("tLogRow_12_NB_LINE", nb_line_tLogRow_12);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "T4");
				}

				ok_Hash.put("tLogRow_12", true);
				end_Hash.put("tLogRow_12", System.currentTimeMillis());

				/**
				 * [tLogRow_12 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tLogRow_14 end ] start
				 */

				currentComponent = "tLogRow_14";

//////
//////
				globalMap.put("tLogRow_14_NB_LINE", nb_line_tLogRow_14);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Td");
				}

				ok_Hash.put("tLogRow_14", true);
				end_Hash.put("tLogRow_14", System.currentTimeMillis());

				/**
				 * [tLogRow_14 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"C:/Users/Mega-PC/Desktop/Bi_project/outputfiles/Delivery_per_category.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("Product_Category");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Avg_Delivery");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());

				currentComponent = "tLogRow_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tLogRow_13 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_13 = "|";
				java.io.PrintStream consoleOut_tLogRow_13 = null;

				StringBuilder sbHeader_tLogRow_13 = new StringBuilder();

				sbHeader_tLogRow_13.append("Product_Category");

				sbHeader_tLogRow_13.append("\t");

				sbHeader_tLogRow_13.append("Avg_Delivery");

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_13);
				}
				consoleOut_tLogRow_13.println(sbHeader_tLogRow_13.toString());
				consoleOut_tLogRow_13.flush();

				StringBuilder strBuffer_tLogRow_13 = null;
				int nb_line_tLogRow_13 = 0;
///////////////////////    			

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					row24.Product_Category = aggregated_row_tAggregateRow_5.Product_Category;

					if (aggregated_row_tAggregateRow_5.Avg_Delivery_count > 0) {

						double row24_Avg_Delivery_temp = (double) aggregated_row_tAggregateRow_5.Avg_Delivery_sum
								/ (double) aggregated_row_tAggregateRow_5.Avg_Delivery_count;

						row24.Avg_Delivery = (float) row24_Avg_Delivery_temp;

					} else {
						String count = "0";

						row24.Avg_Delivery = ParserUtils.parseTo_float(count);

					}

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_13 main ] start
					 */

					currentComponent = "tLogRow_13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row24"

						);
					}

///////////////////////		

					strBuffer_tLogRow_13 = new StringBuilder();

					if (row24.Product_Category != null) { //

						strBuffer_tLogRow_13.append(String.valueOf(row24.Product_Category));

					} //

					strBuffer_tLogRow_13.append("|");

					strBuffer_tLogRow_13.append(FormatterUtils.formatUnwithE(row24.Avg_Delivery));

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_13);
					}
					consoleOut_tLogRow_13.println(strBuffer_tLogRow_13.toString());
					consoleOut_tLogRow_13.flush();
					nb_line_tLogRow_13++;
//////

//////                    

///////////////////////    			

					row25 = row24;

					tos_count_tLogRow_13++;

					/**
					 * [tLogRow_13 main ] stop
					 */

					/**
					 * [tLogRow_13 process_data_begin ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 main ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row25"

						);
					}

					StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
					if (row25.Product_Category != null) {
						sb_tFileOutputDelimited_5.append(row25.Product_Category);
					}
					sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
					sb_tFileOutputDelimited_5.append(row25.Avg_Delivery);
					sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

					nb_line_tFileOutputDelimited_5++;
					resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

					outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

					tos_count_tFileOutputDelimited_5++;

					/**
					 * [tFileOutputDelimited_5 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_5 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_5";

					/**
					 * [tFileOutputDelimited_5 process_data_end ] stop
					 */

					/**
					 * [tLogRow_13 process_data_end ] start
					 */

					currentComponent = "tLogRow_13";

					/**
					 * [tLogRow_13 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

//////
//////
				globalMap.put("tLogRow_13_NB_LINE", nb_line_tLogRow_13);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.remove("tAggregateRow_4");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				/**
				 * [tAggregateRow_3_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				/**
				 * [tAggregateRow_3_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				/**
				 * [tAggregateRow_4_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				/**
				 * [tAggregateRow_4_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_10 finally ] start
				 */

				currentComponent = "tLogRow_10";

				/**
				 * [tLogRow_10 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tLogRow_11 finally ] start
				 */

				currentComponent = "tLogRow_11";

				/**
				 * [tLogRow_11 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tLogRow_12 finally ] start
				 */

				currentComponent = "tLogRow_12";

				/**
				 * [tLogRow_12 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tLogRow_14 finally ] start
				 */

				currentComponent = "tLogRow_14";

				/**
				 * [tLogRow_14 finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				/**
				 * [tAggregateRow_5_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				/**
				 * [tAggregateRow_5_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_13 finally ] start
				 */

				currentComponent = "tLogRow_13";

				/**
				 * [tLogRow_13 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final job jobClass = new job();

		int exitCode = jobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = job.class.getClassLoader()
					.getResourceAsStream("dbms_project/job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 561741 characters generated by Talend Open Studio for Data Integration on the
 * January 21, 2024, 6:06:47 PM CET
 ************************************************************************************************/